5.1关于VxWorks的C++支持
提供了支持风河Diab和GNU工具链的C++支持。默认情况下，为内核和RTP应用程序提供C++ 03支持。还提供了C++ 11支持作为RTP应用程序和共享库的替代。
C++头文件
每个编译器都有自己的C++库和C++头文件（如iostream和new）。C++标题位于编译器安装目录中。不需要特殊的标志来允许编译器找到这些标题。
SDA和C++代码警告
由PowerPC支持的小数据区域（SDA）重新定位不适用于C++代码。不要使用Wind River Diab编译器-Xsmall-const=8 -Xsmall-data=8选项或GNU -G8 -msdata=eabi选项。

5.2 C++编译器的差异
风河Diab C++编译器使用爱迪生设计组（EDG）C++前端。它完全符合ANSI C++标准。GNU编译器支持ANSI C++标准中描述的大部分语言特征。
有关Diab编译器和相关工具的完整文档，请参阅Wind River Diab编译器文档集。有关GNU编译器和相关工具的完整文档，请参阅GNU工具包用户指南。
警告：风河Diab编译器C++与GNU C++二进制文件不兼容。如果VxWorks包含由内核应用程序（链接或下载）使用的C++代码，那么这两个代码都必须使用相同的工具链构建。但是，如果只包含C代码，则不需要使用相同的编译器。并且不需要VxWorks和RTP应用程序使用相同的编译器，不管它们是否包含C++代码。
标准模板库（STL）
VxWorks的GNU STL端口在类级别是线程安全的。
Diab STL是线程安全的。
实例化
在C语言中，程序使用的每个函数和变量都必须精确地定义在一个地方（更精确地说是一个翻译单元）。然而，在C++中，实体没有明确的定义点，但仍然需要定义。其中包括模板专门化（泛型模板的特定实例；例如，std::vector int）、用于内联函数的离线主体，以及用于没有非内联虚拟函数的类的虚拟函数表。对于这些实体，源代码定义通常出现在头文件中，并且包含在多个翻译单元中。
为了处理这种情况，Wind River Diab编译器和GNU编译器在每个需要它的文件中都生成一个定义，并将每个这样的定义放在自己的部分中。Diab编译器为此使用COMDAT部分，而GNU编译器使用linkonce部分。在每种情况下，链接器都会删除重复的部分，结果是最终的可执行文件恰好包含每个所需实体的一个副本。
注意：对于内核代码，只有Wind River Diab编译器链接器可用于处理包含COMDAT部分的文件。类似地，只有GNU链接器可用于包含链接部分的文件。此外，VxWorks目标和主机加载程序不能处理COMDAT和链接部分。完全链接的VxWorks映像将不包含任何COMDAT或LIKONE段。然而，从C++代码编译的中间对象文件可以包含这样的部分。为了构建一个可下载的C++模块，或者一个可以由任何链接器处理的文件，您必须使用-R5选项（DIABR）或指定Link KOUT链接器脚本（GCC）来执行中间链接步骤。（注意，-r5和-r4选项（后者在本章的其他部分中提到）都折叠COMDAT文件，但是它们的总体用途不同，并且在单个链接器命令中它们的使用是互斥的。）
Wind River建议您使用模板实例化的默认设置，因为这些设置结合了易用性和最小代码大小。但是，可以更改模板实例化算法；有关详细信息，请参阅编译器文档。
风河DIABR编译器及模板的多重实例化
风河DIABC编译器控制多个模板实例的C++选项是：
-Xcomdat
这个选项是默认的。当隐式实例化模板时，生成的代码或数据部分被标记为comdat。然后，链接器将标记为相同的实例折叠到内存中的单个实例中。
注意：如果要使用代码作为可下载的内核模块，则必须使用-r4选项来折叠输入文件中包含的任何COMDAT部分。
-Xcomdat-off
在结果对象文件中生成模板实例化和内联函数作为静态实体。可以导致静态成员函数或类变量的多个实例。
为了更好地控制模板实例化，-Ximplicit-templates-off选项告诉编译器仅在源代码中显式调用的地方实例化模板；例如：
template class A<int>; // Instantiate A<int> and all member functions.
template int f1(int); // Instantiate function int f1{int).

GNU编译器多实例化的模板
GNU的C++编译器选项控制多实例化的模板是：
-fimplicit-templates
这是默认选项。模板的实例化和外行的副本（内联函数是把linkonce为特殊的部分。重复的部分是添加的链接，所以，每一次出现instantiated模板的输出文件。
警告：在VxWorks操作系统不支持动态加载linkonce直接切片的内核模块。而不是“linkonce切片和collapsed必须添加到标准文本和数据部分的前负荷。
-fno-implicit-templates
这是显式实例化。使用这个模板实例化策略没有任何你需要的。
运行时类型信息
编译器都支持的运行时类型信息（RTTI），和冰化特征的城市的默认。这一特征adds开销小，任何两个C++程序与含虚拟函数的类。
The Wind River Diab编译器RTTI的语言特征，可以用-Xrtti-off的旗帜。
GNU编译器RTTI的语言特征，可以用“没有禁止RTTI的旗帜。

5.3 VxWorks的C++配置
默认情况下，VxWorks只包含最小的C++支持。您可以通过添加其他组件来添加C++功能。
其他一些关于C++的组件
INCLUDE_CTORS_DTORS 包含内核（默认包含在内核中）
确保编译器生成的初始化函数，包括C++静态对象的初始化器，在内核启动时调用。
INCLUDE_CPLUS
包括C++应用程序的基本支持。典型地，这与INCLUDE_CPLUS_LANG一起使用。
INCLUDE_CPLUS_LANG
包括对C++语言特性的支持，如新的、删除的和异常的处理。
INCLUDE_CPLUS_IOSTREAMS
包括所有库功能。
INCLUDE_CPLUS_DEMANGLER
Dimangle，如果您使用内核shell加载程序，这是有用的，因为它提供了将离散化的符号名称返回到内核外壳符号表查询的功能。如果VxWorks中包括INCLUDE_CPLUS和INCLUDE_SYM_TBL组件，则默认情况下添加此组件。
也见5.6 Using C++11 With RTPs and Shared Libraries, p.71。

5.4使用C++任务所需的任务生成选项
任何使用VC++的VxWorks任务都必须用VX_FP_TASK任务选项生成。默认情况下，从Workbench生成的任务自动启用VX_FP_TASK任务。
注意：当使用C++的任务生成时，无法使用VX_FP_TASK任务选项会导致在运行时难以调试、不可预测的浮点寄存器损坏。C++异常处理程序使用浮点寄存器。VX_FP_TASK选项确保在上下文切换期间正确地保存和恢复浮点寄存器。

5.5 C与C++代码之间的调用
如果从C代码中引用一个（非重载、全局）C++符号，则必须使用Extn“C”来对C链接进行原型化。
例如：
#ifdef __cplusplus
extern "C" void myEntryPoint ();
#else
void myEntryPoint ();
#endif使用此语法使C符号也可用于C++代码。VxWorks C符号可以自动提供给C++，因为VxWorks的头文件使用这种机制进行声明。
使用#ifdef构造允许一个单独的头文件同时用于C和C++。
内核代码
对于内核代码，当extern "C"不适合用于C++和C代码之间的外部链接时，生成系统会产生错误。
RTP应用程序代码
对于RTP应用程序代码，如果未适当地使用extern "C"链接说明符，则导致错误的类型取决于发生的上下文（构建时静态链接、运行时加载以及插件与RTP应用程序的链接等）。

5.6使用C++ 11与RTPS和共享库
默认情况下，C++ 03库用于RTP应用程序和共享库。还提供了C++ 11库，供GNU编译器使用。在创建RTP应用程序或共享库时，选择对应于所需C++库类型的生成规范。
有关C++ 11的详细信息，请参阅Dinkum C++11 Libraries Reference.。
若要使用RTP应用程序和共享库使用C++ 11，必须创建项目并配置VxWorks如下：
步骤1：创建VSB项目。
步骤2：配置VSB项目如下：
1，对于主工具选项，选择GNU，使用PRI_TOOL_processor_arch_version_gnu。
2，对于应用程序工具选项，使用APP_PRI_archName选择与主工具相同的工具。
3，对于RTP C++库选项，选择LANG_LIB_CPLUS_CPLUS_USER_2011。然后自动选择标准库（STANDARD_STL）。
注意：当辅助编译器被设置为GNU时，C++ 11的支持也是可用的，不管你的主要编译器选择。但是，VxWorks 6.9兼容模式中不支持C++ 11的支持。
步骤3：构建源代码。
步骤4：创建你的VIP项目，基于你的VSB项目。
步骤5：添加支持你的应用程序所需的INCLUDE_CPLUS和任何其他C++组件。
有关更多信息，请参见5.3个VxWorks配置，用于C++、P.70。
步骤6：构建VxWorks。
步骤7：基于VSB项目创建RTP或共享库项目。这样做时，确保项目的活动生成规范被设置为C++ 11（vsbName_archNamegnu_C++2011）。
第8步：使用GNU构建RTP应用程序。

5.7个C++命名空间
风河和GNU C++编译器都支持命名空间。根据C++标准，可以为自己的代码使用命名空间。
C++标准还定义了名为STD的命名空间中的系统头文件名。标准要求您指定您将使用的标准头文件中的名称。
代码示例
根据最新标准，下面的代码在技术上是无效的，并且不适用于此版本。它是用以前版本的GNU编译器编译的，但不会在风河或GNU C++编译器的当前版本下编译：
#include <iostream.h>
int main()
{
cout << "Hello, world!" << endl;
}
下面的示例提供了三个正确的备选方案，说明C++标准现在将如何表示这段代码。示例用风河或GNU C++编译器编译：
// Example 1
#include <iostream>
int main()
{
std::cout << "Hello, world!" << std::endl;
}
// Example 2
#include <iostream>
using std::cout;
using std::endl;
int main()
{
cout << "Hello, world!" << endl;
}
// Example 3
#include <iostream>
using namespace std;
int main()
{
cout << "Hello, world!" << endl;
}

5.8 使用C++异常处理
C＋＋异常处理由INCLUDE_CPLUS_LANG组件提供，但它可以被禁用为用户代码。
若要禁用用户代码的异常处理，请执行以下操作：
步骤1：在创建VxWorks图像项目（VIP）之前定义环境变量CXX_STL_VARIANT=abrided。
这确保了正确的（异常禁用）库链接。
第2步：为编译器选择GNU或-mc++-abr，将-Xc++-abr添加到编译器选项中。
