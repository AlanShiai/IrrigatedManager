6.1 关于任务和多任务
现代实时系统基于多任务和任务间通信的互补概念。多任务环境允许将实时应用程序构造为一组独立的任务，每个任务具有自己的执行线程和系统资源集。
VxWorks任务是操作系统本身以及作为进程执行的应用程序中代码执行的基本单元。在其他操作系统中，术语“线程”被类似地使用。
多任务为应用程序提供了控制和响应多个离散的真实世界事件的基本机制。VxWorks实时内核提供了一个基本的多任务环境。在单处理器系统上，当内核根据调度策略交错它们的执行时，多任务会产生并发运行的许多线程的外观。在SMP系统中，多任务处理涉及许多执行线程的实际并发。
每个任务都有自己的上下文，这是任务每次被内核调度运行时看到的CPU环境和系统资源。在上下文切换中，任务的上下文保存在任务控制块（TCB）中。任务的上下文包括诸如用户和组ID、执行线程（任务的程序计数器）、CPU寄存器、动态变量堆栈和函数调用等属性。
除了少数例外，VxWorks的对称多处理器（SMP）和单处理器（UP）配置共享相同的API――差别仅相当于几个函数。还要注意，一些编程实践――例如依赖于任务优先级而不是显式锁定的隐式同步技术――不适合SMP系统。
有关SMP编程的信息，请参见18，VxWorks SMP。