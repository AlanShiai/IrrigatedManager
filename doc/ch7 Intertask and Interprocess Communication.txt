7.1关于任务间和进程间通信112
VxWorks任务间和进程间工具提供了用于同步不同任务的活动以及用于它们之间的通信的机制。
对于进程间和内核进程通信，可以创建VxWorks信号量和消息队列、管道和事件（以及POSIX信号量和事件）作为公共对象，以提供跨内存边界（内核和进程之间，以及不同进程之间）的任务间通信耳鼻喉科手术）。
VxWorks提供了用于任务间和进程间通信的以下设施：
共享数据结构
提供在同一内存空间（内核或RTP）中执行的任务通过访问数据结构进行通信的方法。参见7.2个共享数据结构P.113。
中断锁（仅内核）
提供一种禁用中断的方法，从而防止ISRS抢占。中断锁定不是通用机制，应该只以非常有限的方式使用。参见7.3个中断锁，P.113。
任务锁（仅内核）
提供一种禁用其他任务抢占的方法。任务锁定不是一种通用机制，应该只以非常有限的方式使用。参见7.4个任务锁，P.114。
信号量
提供任务同步和互斥的主要手段。通用和特殊的变体是可用的，如7.5种类型的信号机，第115页。信号量可以被创建为公共对象，这允许它们在进程间通信中使用；关于这方面的信息，参见7.18进程间与公共对象的通信，第147页。有关POSIX信号量的信息，请参阅9.19个POSIX信号量表P.217。
消息队列
提供在任务之间直接通信消息的高级机制。参见7.12个消息队列，P.131。消息队列可以创建为公共对象，这允许它们在进程间通信中使用；关于这方面的信息，请参阅7.18进程间与公共对象的通信，第147页。
管
为消息队列设施提供另一个消息传递接口。管道通过I/O系统运行，允许使用标准的I/O功能和选择（）。见7.14个管道，P.136。
VxWorks事件
提供任务和其他任务、中断服务例程（ISR）和任务、信号量和任务、消息队列和任务之间的通信和同步方法。参见7.16个VxWorks事件，P.138。
VxWorks条件变量
提供基本的任务同步能力，它将对资源的线程安全访问与事件信令能力结合起来。参见7.17 VxWorks条件变量P.144。
有关不打算用于通用任务间和进程间通信的信号的信息，请参阅8.1 About Signals，p.152。
注意：除了少数例外，VxWorks的对称多处理器（SMP）和单处理器（UP）配置共享用于任务间和进程间通信的相同设施――差别仅相当于几个功能。有关VxWorks SMP的信息，请参见18。VxWorks SMP；有关迁移的具体信息，请参见VxWorks SMP的18.18代码迁移，p.449。

7.2共享数据结构113
在同一个内存空间（在单个进程或内核中）中执行的任务进行通信的最明显的方法是访问共享数据结构。
因为单个进程或内核中的所有任务都存在于单个线性地址空间中，所以在任务之间共享数据结构是微不足道的。
全局变量、线性缓冲区、环形缓冲区、链接列表和指针可以由在不同任务上下文中运行的代码直接引用。然而，对共享数据结构的访问应该使用诸如信号量之类的互斥来控制（参见7.5种类型的信号量，p.115）。

7.3中断锁113
在内核中，intLock)函数可用于禁用中断，从而防止ISR抢占。它可以从任务或ISR上下文调用。intUnLock（）函数可重启中断。
这些函数用于保护代码的关键区域如下：
foo )
{
int lockKey = intLock);
.
. /* critical region of code that cannot be interrupted */
.
intUnlocklockKey);
}
当任务正在访问ISR也访问的变量或数据结构时，使用intLock)来防止抢占。操作应该是最小的，这意味着几行代码和没有函数调用。如果调用太长，则会直接影响中断等待时间，并使系统变得不那么确定性。
为了防止任务和ISR抢占任务，请同时使用intLock)和taskLock)；有关这方面的更多信息，请参阅intLock)的API引用条目。
有关ISRS的信息，请参阅8.7关于中断服务例程：ISRs，P.163。
警告：在锁定中断的情况下调用VxWorks系统功能可能会导致中断在未指定的时间内被重新启用。如果被调用的函数阻塞，或者导致更高优先级的任务变得有资格执行（READY），则在另一个任务执行时或内核空闲时重新启用中断。有关这方面的更多信息，请参见intLock（）的API引用条目。
注意：intLock)函数是为VxWorks的UP配置提供的，但不是SMP配置。SMP系统有几种可选方案，包括ISR可调用自旋锁，它在UP系统中默认为intLock)行为。有关更多信息，请参阅ISR-Callable Spinlocks，p.423和18.18，VxWorks SMP的代码迁移，p.449。

7.4任务锁114
在内核中，TaskLock（）函数禁用调用任务的抢占其他任务。
调用任务是只有在就绪状态下才允许执行的唯一任务。如果调用任务阻塞或挂起，则调度程序选择下一个最高优先级的合格任务来执行。当调用任务解除阻塞并恢复执行时，再次禁用抢占。（有关任务状态的信息，请参阅6.4Task States and.tions，p.82。）taskUnlock)函数可重新启用其他任务的抢占。
任务锁函数用于保护代码的关键区域如下：
foo)
{
taskLock);
.
. /* critical region of code that cannot be interrupted */
.
taskUnlock);
}
任务锁可以嵌套（它们使用count变量实现），在这种情况下，直到taskUnlock)被调用了taskLock)的次数，才重新启用抢占。
任务锁会导致不可接受的实时响应时间。较高优先级的任务在锁定任务离开关键区域之前无法执行，即使较高优先级的任务本身不涉及关键区域。虽然这种互斥很简单，但一定要保持持续时间短。通常，信号量为互斥提供了更好的机制；参见7.5种类型的信号量，p.115。
当使用taskLock)时，不会阻塞中断，但它可以与intLock)配对以禁用任务和ISR的抢占。
有关更多信息，请参见taskLock（）和taskUnLock（）的API引用条目。
注意：taskLock)和taskUnlock)函数是为VxWorks的UP配置提供的，而不是SMP配置。SMP系统可以使用几种替代方法，包括只任务自旋锁，在UP系统中默认为taskLock)和taskUnlock)行为。有关更多信息，请参阅VxWorks SMP的仅任务自旋锁，p.425和18.18代码迁移，p.449。

7.5种信号量115
VxWorks信号量是高度优化的，提供了一种非常快的任务间通信机制。信号量是处理互斥和任务同步需求的主要手段。
为了互斥，信号灯互锁访问共享资源。在内核中，它们提供了比锁定中断或任务更细粒度的相互排斥（参见7.3中断锁，p.113和7.4任务锁，p.114）。
对于同步，信号量与外部事件协调任务的执行。
注意：信号量提供完整的内存屏障，这对于VxWorks的SMP配置特别重要。欲了解更多信息，请参阅18.7内存障碍，P.429。
VxWorks提供下列类型的信号量，它们针对不同类型的使用进行了优化：
二进制
最快、最通用的信号量。同步或互斥优化。有关更多信息，请参阅7.7个二进制信号量P.120。
互斥
针对互斥中固有的问题优化的特殊二进制信号量：优先级反转、删除安全性和递归。有关更多信息，请参见7.8个互斥信号量，P.123。
计数
和二进制信号量一样，但要保持信号量的次数。优化用于保护资源的多个实例。有关更多信息，请参见7.9计数信号量，P.128。
读/写
一种特殊类型的信号量，为需要对对象进行写访问的任务提供互斥，并为仅需要对对象进行读访问的任务提供并发访问。这种信号量对于SMP系统特别有用。有关更多信息，请参见7.10个读/写信号量，P.128。
VxWorks不仅提供专门为VxWorks设计的信号量，还提供为可移植性设计的POSIX信号量。另一个信号量库提供了与POSIX兼容的信号量接口；参见9.19POSIX Semaphores，p.217。

7.6信号量的创建和使用116
在大多数情况下，VxWorks为信号量控制提供了一个单一的、统一的接口，而不是定义针对每种类型的信号量的一组完整的信号量控制函数。
本规则的例外情况如下：
■ 每个信号量类型所特有的创建函数。
■ 读/写信号量的give和take函数，它支持每个操作的读和写模式。
■给定和获取核函数的可伸缩和内联变体-用于二进制信号量和互斥信号量-它们提供了标准函数的优化替代。请参阅可伸缩和内联信号量，并给出内核函数P.119。

信号量控制函数
功能    描述
semBInitialize（）初始化预先分配的二进制信号量。参见内核信号量的静态实例化，P.118。仅内核。
semCInitialize（）初始化预先分配的计数信号量。参见内核信号量的静态实例化，P.118。仅内核。
semMInitialize（）初始化预先分配的互斥信号量。参见内核信号量的静态实例化，P.118。仅内核。
semRWInitialize（）初始化预先分配的读/写信号量。参见内核信号量的静态实例化，P.118。仅内核
semBCreate（）分配和初始化二进制信号量。
semMCreate（）分配并初始化互斥信号量。
semCCreate（）分配和初始化计数信号量。
semRWCreate（）分配和初始化读/写信号量。
semDelete（））终止并释放信号量（所有类型）。
semTake（）采用二进制、互斥或计数。信号量，或写模式下的读/写信号量。
semWTake（）在读取模式下读取/写入信号量。
semWTake（）在写模式下读取/写入信号量。
semGive（）给出二进制、互斥或计数信号量。
semRWGive（）给出读/写信号量。
semMGiveForce（）给出了一个没有限制的互斥信号量。仅用于调试目的。
semRWGiveForce（）给出了一个没有限制的读写信号量。仅用于调试目的。
semFlush（）解锁所有等待二进制或计数信号量的任务。
semExchange（）提供了SMP系统中信号量的原子给予和交换。
创建函数返回一个信号量ID，该ID在其它信号量控制函数随后使用期间充当信号量的句柄。当创建信号量时，指定队列类型。在信号量上挂起的任务可以按优先级顺序（SEM_Q_PRIORITY）或先进先出顺序（SEM_Q_FIFO）排队。

警告：semDelete（）调用终止信号量，并释放所有关联的内存。删除信号量时要小心，特别是用于互斥的信号量，以避免删除另一个任务仍然需要的信号量。不要删除信号量，除非同一任务第一次成功。
利用公共信号量进行进程间通信
VxWorks信号量可以创建为私有对象，这些私有对象只能在创建它们的内存空间（内核或进程）内访问；也可以创建为公共对象，这些对象可以在整个系统中访问。要创建作为公共对象的信号量，必须使用semOpen)函数，并且信号量名称必须以正斜杠（例如/mySem）开头。信号量的类型是用信号量类型参数指定的。
有关详细信息，请参阅7.18进程间与公共对象通信，p.147，VxWorks内核API引用中的semOpen条目和VxWorks应用程序API引用中的semLib条目。

利用公共信号量进行进程间通信
VxWorks信号量可以创建为私有对象，这些私有对象只能在创建它们的内存空间（内核或进程）内访问；也可以创建为公共对象，这些对象可以在整个系统中访问。要创建作为公共对象的信号量，必须使用semOpen()函数，并且信号量名称必须以正斜杠（例如/mySem）开头。信号量的类型是用信号量类型参数指定的。
有关详细信息，请参阅7.18进程间与公共对象通信，p.147，VxWorks内核API引用中的semOpen条目和VxWorks应用程序API引用中的semLib条目。
可扩展和内联信号量内核函数的选项
功能描述
SEM_NO_ID_VALIDATE 验证在信号量上没有执行对象验证。
SEM_NO_ERROR_CHECK 没有执行错误检查代码。这包括对中断限制、从挂起队列中选择的所有者的任务验证和对互斥信号量的所有权验证的测试。
SEM_NO_EVENT_SEND 不要发送VxWorks事件，即使任务已经注册以接收关于此信号量的事件通知。
SEM_NO_SYSTEM_VIEWER  不发送系统查看器事件。这只适用于信号量是不争的。如果需要挂起接收调用或取消给定调用的任务，则发送系统查看器事件。这与对semLibAPI的调用不同，semLibAPI在挂起（或未结束）时发送所有调用的事件以及第二事件。
SEM_NO_RECURSE  不要执行递归检查（只应用于互斥信号量）是否竞争信号量。这是重要的，这是一致地使用在任何单个线程的执行。
有关可伸缩和内联函数的一般信息，请参阅可伸缩和内联信号量获取和给出内核函数，p.119。
注意：当创建信号量时，表7-2中列出的选项不能使用。如果使用错误，则会产生错误。

内核信号量的静态实例化
动态信号量创建函数执行一个动态的两步操作，其中在运行时为信号量对象分配内存，然后初始化对象。还可以静态实例化信号量（和其他VxWorks对象），这意味着在编译时为该对象分配它们的内存，然后在运行时初始化该对象。
VX_BINARY_SEMAPHORE、VX_COUNTING_SEMAPHORE、VX_MUTEX_SEMAPHORE和VX_READ_WRITE_SEMAPHORE宏在编译时分别声明类型为二进制、计数和互斥的信号量。
这些宏将信号量名称作为参数。
这些宏声明的信号量分别通过调用函数semBInitialize()、semCInitialize() semMInitialize()和semRWInitialize()初始化。这三个semXInitialize()函数是各自semXCreate()函数的等价物。
对于VX_XXX_SEMAPHORE宏和semXInitialize()函数，必须使用相同的信号量名称。semXInitialize()函数的返回值是一个信号量ID，然后用于对信号量执行所有操作。例如：
#include <vxWorks.h>
#include <semLib.h>
VX_BINARY_SEMAPHORE(mySemB); /* declare the semaphore */
SEM_ID mySemBId; /* semaphore ID for further operations */
STATUS initializeFunction (void)
{
if ((mySemBId = semBInitialize (mysemB, options, 0)) == NULL)
return (ERROR); /* initialization failed */
else
return (OK);
}

有关更多信息，请参见semBLib、semCLib和semMLib的API引用。
有关静态实例化的一般信息，请参阅内核对象的1.5静态实例化，p.7。

可扩展和内联信号量取核函数
除了标准的信号量give和take函数之外，VxWorks还提供了可伸缩和内联的变体，用于内核中的二进制信号量和互斥信号量。这些功能具有以下优点：
■基于可伸缩选项和内联使用，对VxWorks的UP和SMP配置进行性能改进。
■即使只使用内联变体，SMP相对于标准函数的其他性能改进也是如此，因为它们为SMP系统中的无争用获取和操作提供了优化。
可伸缩函数被设计成当性能比提供其健壮性的标准函数（例如各种形式的错误检查）的特征更重要时，用于竞争性很小的资源。有几个选项可用于取消选择通常用于任何给定采取或给予操作的操作特性。
take和give函数的内联变体提供了与可伸缩函数相同的选项，但也避免了与函数调用相关的开销。与任何内联代码一样，重复使用会增加系统占用率。如果应用程序对具有内联变体的函数进行了多次调用，则应该为内联函数创建包装器，或者应该使用可伸缩变体。
表7-1中列出了可伸缩和内联变量；表7-2中列出了可伸缩和内联函数的选项。注意，为了使用这些函数，必须包含h/inline/semLibInline.h头文件。

7.7个二进制信号量120
通用二进制信号量能够满足两种形式的任务协调要求：互斥和同步。二进制信号量具有最小的开销，使其特别适用于高性能需求。7.8 Mutual-Exclusion  Semaphores，p.123中描述的互斥信号量也是一个二进制信号量，但是它已经被优化以解决互斥固有的问题。或者，如果互斥信号量的高级特征被认为是不必要的，则二进制信号量可用于互斥。
二进制信号量可以看作是可用的（完全）或不可用的（空的）标志。当任务使用带有sem.()的二进制信号量时，结果取决于在调用时信号量是可用的（满的）还是不可用的（空的）；参见图7-2。如果信号量可用（满），则信号量变得不可用（空），并且任务立即继续执行。如果信号量不可用（空），则将任务置于阻塞任务的队列中，并进入信号量可用性挂起的状态。
当任务使用sem.()给出二进制信号量时，结果还取决于在调用时信号量是可用的（满的）还是不可用的（空的）；参见图7-3。如果信号量已经可用（满），给信号量根本没有影响。如果信号量不可用（空），并且没有任务等待接收它，则信号量变为可用（满）。如果信号量不可用（空），并且一个或多个任务正在等待其可用性，则阻塞任务队列中的第一个任务被解除阻塞，并且信号量不可用（空）。

互斥
二进制信号量联锁有效地访问共享资源。与禁用中断或抢占锁不同，二进制信号量将互斥的范围限制为仅关联的资源。在该技术中，创建信号量来保护资源。最初，信号量可用（满）。
/* includes */
#include <vxWorks.h>
#include <semLib.h>
SEM_ID semMutex;
/* Create a binary semaphore that is initially full. Tasks *
* blocked on semaphore wait in priority order. */
semMutex = semBCreate (SEM_Q_PRIORITY, SEM_FULL);
当任务想要访问资源时，它必须首先接受该信号量。只要任务保持信号量，那么所有寻求访问资源的其他任务都被阻止执行。当使用资源完成任务时，它将返回信号量，从而允许另一个任务使用资源。
因此，对需要互斥的资源的所有访问都用semTake()和semGive()对括起来：
semTake (semMutex, WAIT_FOREVER);
.
. /* critical region, only accessible by a single task at a time */
.
semGive (semMutex);

同步
当用于任务同步时，信号量可以表示任务正在等待的条件或事件。最初，信号量不可用（空）。任务或ISR通过发出信号量来指示事件的发生。另一个任务通过调用semTake（）来等待信号量。等待任务阻止事件发生，并给出信号量。
（参见8.7关于中断服务程序：ISRs，P.163，用于ISRS的完整讨论）
注意用于互斥的信号量和用于同步的信号量在序列上的差异。对于互斥，信号量最初是满的，每个任务首先获取，然后返回信号量。为了同步，信号量最初是空的，一个任务等待接收另一个任务给出的信号量。
在示例7-1中，内核函数init()创建二进制信号量，将ISR附加到事件，并生成处理事件的任务。函数task1（）运行直到它调用semTake（）。它在那个点仍然被阻塞，直到一个事件导致ISR调用semGive（）。当ISR完成时，TASK1（）执行以处理事件。在专用任务的上下文中处理事件处理有一个优点：在中断级别上发生的处理更少，从而减少了中断延迟。这种事件处理模型被推荐用于实时应用程序。

示例7-1使用信号量进行内核任务同步
/* This example shows the use of semaphores for task synchronization. */
/* includes */
#include <vxWorks.h>
#include <semLib.h>
#include <arch/arch/ivarch.h> /* replace arch with architecture type */
SEM_ID syncSem; /* ID of sync semaphore */
init (
int someIntNum
)
{
/* connect interrupt service routine */
intConnect (INUM_TO_IVEC (someIntNum), eventInterruptSvcRout, 0);
/* create semaphore */
syncSem = semBCreate (SEM_Q_FIFO, SEM_EMPTY);
/* spawn task used for synchronization. */
taskSpawn ("sample", 100, 0, 20000, task1, 0,0,0,0,0,0,0,0,0,0);
}
task1 (void)
{
...
semTake (syncSem, WAIT_FOREVER); /* wait for event to occur */
printf ("task 1 got the semaphore\n");
... /* process event */
}
eventInterruptSvcRout (void)
{
...
semGive (syncSem); /* let task 1 process event */
...
}

广播同步允许在同一信号量上被阻塞的所有进程被原子地解除阻塞。正确的应用程序行为通常要求一组任务在集合中的任何任务有机会处理其他事件之前处理事件。函数semFlush()通过解锁信号量上挂起的所有任务来解决此类同步问题。

7.8互斥信号量123
互斥信号量是一种专用的二进制信号量，用于解决互斥中固有的问题，包括优先级反转、删除安全性和对资源的递归访问。
互斥信号量的基本行为与二进制信号量相同，但有以下例外：
它只能用于互斥。
它只能通过承担它的任务来实现。
它不能从ISR（内核）中得到。
该semFlush（）操作是非法的。

RTP应用中的用户级互斥信号量
注意，互斥信号量可以被创建为用户级（用户模式）对象。它们比内核级信号量更快，只要它们没有冲突，这意味着：
在一个semTake（）操作期间，互斥信号量是可用的。
在semGive（）操作中没有等待信号量的任务。
在给定互斥信号量的情况下，无争用的情况应该是最常见的。
在争用互斥信号量的情况下，它比内核级信号量慢，因为必须进行系统调用。
默认情况下，在进程中使用semMCreate()函数创建一个用户级互斥信号量。但是，当semMCreate()和SEM_KERNEL选项一起使用时，可以创建内核级别的信号量。semOpen()函数只能用于在进程中创建内核级信号量。注意，用户级信号量只能被创建为私有对象，而不是公共对象。

优先级反转与优先级继承
图7- 4说明了一种称为优先级反转的情况。

当较高优先级的任务被迫等待一段不确定的时间以完成较低优先级的任务时，会出现优先级反转。
考虑图7-4中的场景：t1、t2和t3分别是高优先级、中优先级和低优先级的任务。任务T3通过获取与其相关联的二进制保护信号量获取了一些资源。当T1抢占T3并通过获取相同的信号量来争夺资源时，它会被阻塞。如果我们可以确保t1不会被阻塞的时间超过t3完成资源所需的时间，那么就没有问题了，因为资源不能被抢占。然而，低优先级任务容易受到中等优先级任务（如t2）的抢占，这可能阻止t3放弃资源。此条件可以持续，在不确定的时间段内阻塞T1。
优先级继承策略
互斥信号量具有选项SEM_INVERSION_SAFE，它支持优先级继承策略。优先级继承策略确保持有资源的任务以该资源上阻塞的最高优先级任务的优先级执行。
一旦任务优先级被提升，它就保持在较高的级别，直到释放所有对任务优先级提升有贡献的相互排斥信号量。因此，通过任何中间优先级任务来保护继承任务不受抢占。此选项必须与优先级队列（SEM_Q_PRIORITY）结合使用。
注意，在继承任务以提升的优先级完成执行之后，它返回到就绪队列优先级列表的末尾，以获得其原始优先级。（有关就绪队列的更多信息，请参见调度和就绪队列，P.8.）
在图7-5中，优先级继承通过在信号量上阻塞t1期间将t3的优先级提升到t1的优先级来解决优先级反转的问题。这保护了T3和间接T1，防止了T2的抢占。
下面的示例创建使用优先级继承策略的互斥信号量：
semId = semMCreate (SEM_Q_PRIORITY | SEM_INVERSION_SAFE);

具有多个互斥信号量的优先级继承
对于一个任务一次拥有多个互斥信号量（启用了优先级继承选项）的情况，该任务以它从在其拥有的任何互斥信号量上被阻塞的任务继承来的最高优先级执行。此外，它继续以该优先级运行，直到它放弃了其他任务被阻塞的所有信号量。
图7-6说明了多个任务与多个互斥信号量交互的以下示例：
1。具有正常优先级100的任务T3采用互斥信号量M1。
2。任务T3使用信号量M2。
3。优先级90的任务T2抢占任务T3。
4。任务T2尝试取信号量M1和块。
5。任务T3以优先级90执行，从任务T2继承。
6。优先级80的任务T1抢占任务T3。
7。任务T1尝试使用信号量M2和块。
8。任务T3以优先级80执行，从任务T1继承。
9。任务T3放弃信号量M2，保留在优先级80。
10。任务T3放弃信号量M1，并返回到其正常优先级100。
11。任务T1获得M2，抢占任务T3。
虽然在放弃两个信号量之前，允许任务t3以它从t1(90)继承的优先级运行似乎并不最佳，但是VxWorks优先级继承策略采用这种方法，以便使信号量操作保持快速，具有确定的执行时间。

删除安全性
另一个互斥问题涉及任务删除。在由信号量保护的关键区域内，通常需要保护正在执行的任务不被意外删除。删除关键区域中执行的任务可能是灾难性的。资源可能处于损坏状态，而保护资源的信号量可能不可用，从而有效地防止对资源的所有访问。
然而，互斥信号量提供了选项SEM_DELETE_SAFE，它支持每个semTake()的隐式taskSafe()和每个semGive()的taskUnsafe()。通过这种方式，可以在有信号量的情况下保护任务不被删除。这个选项比原语taskSafe()和taskUnsafe()更有效，因为生成的代码需要更少的内核入口。
semId = semMCreate (SEM_Q_FIFO | SEM_DELETE_SAFE);
递归资源访问
互斥信号量可以递归地进行。这意味着，在最终释放信号量之前，持有该信号量的任务可以多次获取该信号量。递归对于必须彼此调用但又需要对资源进行互斥访问的一组函数非常有用。这是可能的，因为系统跟踪当前哪个任务持有互斥信号量。
在被释放之前，递归获取的相互排斥信号量必须被给予相同的次数。这是通过一个计数来跟踪的，每个计数都与每个semTake（）一起递增，每个semGive（）都递减。

示例7-2递归使用互斥信号量
/* Function A requires access to a resource which it acquires by taking
* mySem;
* Function A may also need to call function B, which also requires mySem:
*/
/* includes */
#include <vxWorks.h>
#include <semLib.h>
SEM_ID mySem;
/* Create a mutual-exclusion semaphore. */
init ()
{
mySem = semMCreate (SEM_Q_PRIORITY);
}
funcA ()
{
semTake (mySem, WAIT_FOREVER);
printf ("funcA: Got mutual-exclusion semaphore\n");
...
funcB ();
...
semGive (mySem);
printf ("funcA: Released mutual-exclusion semaphore\n");
}
funcB ()
{
semTake (mySem, WAIT_FOREVER);
printf ("funcB: Got mutual-exclusion semaphore\n");
...
semGive (mySem);
printf ("funcB: Releases mutual-exclusion semaphore\n");
}


7.9计数信号灯128
计数信号量是实现任务同步和互斥的另一种手段。计数信号量的工作方式与二进制信号量类似，只是它跟踪给定信号量的次数。
每次给定一个信号量，计数都会递增；每次采用一个信号量，计数就会递减。当计数达到零时，尝试使用信号量的任务被阻塞。与二进制信号量一样，如果给出信号量，并且任务被阻塞，则它将被解除阻塞。但是，与二进制信号量不同，如果给定一个信号量并且没有任务被阻塞，则计数将增加。这意味着给定两个信号量可以在不阻塞的情况下进行两次。表7-3显示了任务执行和给出计数信号量的示例时间序列，该计数信号量被初始化为3。
计数信号量示例
调用   后的信号量调用计数 行为
semCCreate（）3初始化信号量，初始计数为3。
semTake（）2信号量。
semTake（）1信号量。
semTake（）0信号量。
semTake（）0个等待信号量可用的任务块。
semGive（）0任务等待被赋予信号量。
semGive（）1没有等待信号量的任务；计数递增。
计算信号量对于保护资源的多个副本是有用的。例如，可以使用初始计数为5的计数信号量来协调五个磁带驱动器的使用，或者可以使用初始计数为256的计数信号量来实现具有256个条目的环形缓冲区。初始计数被指定为semCCreate（）函数的参数。

7.10个读/写信号量128
读/写信号量为能够有效地利用对资源的读访问和对资源的写访问之间的区别的应用程序提供了增强的性能。读/写信号量可以采用读模式或写模式。
在写模式中保持读/写信号量的任务具有对资源的独占访问。另一方面，在读取模式下保持读/写信号量的任务不具有排他访问。不止一个任务可以在读模式下获取读/写信号量，并获得对相同资源的访问。
因为它是独占的，所以写模式只允许对资源的串行访问，而读模式允许共享或并发访问。在多处理器系统中，不止一个任务（在不同的CPU中运行）可以以真正并发的方式对资源进行读模式访问。然而，在单处理器系统中，访问是共享的，但并发是虚拟的。不止一个任务可以同时对资源进行读模式访问，但由于这些任务不同时运行，因此访问被有效地多路复用。
在读模式下保持读/写信号量的所有任务必须在任何任务以写模式接受它之前放弃它。
读/写信号量特别适合SMP系统（有关VxWorks的SMP配置的信息，请参阅18）。VxWorks SMP。

读写模式规范
读/写信号量不同于其他类型的信号量，因为采用信号量时必须指定访问模式。该模式确定访问是独占的（写模式），还是允许并发访问（读模式）。不同的API对应于不同的访问模式，如下：
semRTake（）用于读取（排他性）模式的
semWTake（）用于写（并发）模式的

您还可以在读取/写入信号量上使用semTake（），但其行为与semWTake（）相同。只要拥有semGive()的任务处于相同的模式，就可以在读/写信号量上使用semGive()。
有关读/写信号量API的更多信息，请参见表7-1和VxWorks API引用。

当任务在写模式下采用读/写信号量时，其行为与互斥信号量的行为相同。任务只包含信号量。在这种模式下，通过任务给出一个任务所持有的信号量的尝试将导致返回值ERROR。
当任务在读模式下采用读/写信号量时，其行为与其他信号量不同。它不提供对资源的独占访问（不保护关键部分），并且信号量可以由多个任务同时保持在读取模式下。
当使用create函数调用创建信号量时，可以指定在读取模式下接受读/写信号量的最大任务数量。还可以使用SEM_RW_MAX_CONCURRENT_READERS组件参数设置所有读/写信号量的系统最大值。默认情况下，设置为32。

如果在调用create函数时没有指定任务的数量，则使用系统默认值。
读/写信号量可以在读写模式下递归地进行。可选地，优先级继承和删除安全可用于每个模式。
写访问操作的优先权
当读/写信号量变得可用时，优先考虑需要写访问的挂起任务，而不管它们的任务优先级相对于需要读访问的挂起任务。也就是说，尝试semWTake()操作的最高优先级任务将获得信号量，即使尝试semRTake()的更高优先级任务也是如此。写入访问的优先级有助于确保受保护的资源保持当前状态，因为没有由于在挂起的写入操作发生之前发生的读取操作而导致的延迟。
然而，请注意，在读/写信号量可以采用写模式之前，必须给出所有读模式采用。

读/写信号量与系统性能
实现预期用途的读/写信号量的系统的性能应该得到提高，特别是在SMP系统中。然而，由于跟踪多个读取模式所有者涉及到额外的簿记开销，因此在功能确实符合明确设计目标的情况下，性能可能会受到不利影响。特别地，单处理器系统中的中断延迟和多处理器系统中的内核延迟可能受到不利影响。

7.11特殊信号量选项130
对于内核任务，统一的VxWorks信号量接口包括三个特殊选项：超时、队列和与VxWorks事件一起使用。对于RTP任务，它还提供了第四个选项：可中断的信号。
这些选项对于7.10 Read/Write Semaphores，p.128中描述的读/写信号量或者9.19 POSIX Semaphores，p.217中描述的符合POSIX的信号量都不可用。

信号量超时
作为阻塞直到信号量可用的替代方法，信号量采取操作可以限制到指定的时间段。如果在此期间未使用信号量，则取操作失败。
这个行为由semTake()的参数和read/write信号量的take函数控制，这些函数指定任务在挂起状态下愿意等待的时间量。如果任务在指定的时间内成功地获取了信号量，则获取函数返回OK。获取函数在成功获取信号量之前由于超时而返回ERROR时的errno集取决于传递的超时值。
带有NO_WAIT(0)的semTake()表示根本不等待，将errno设置为S_objLib_OBJ_UNAVAILABLE。具有正超时值的semTake（）具有返回S_objLib_OBJ_TIMEOUT的功能。WAIT_FOREVER （-1）的超时值意味着无限期等待。

有关本机VxWorks API超时和POSIAPI超时的更多信息，请参阅7.19关于VxWorks API超时参数，p.149。

信号量与排队
VxWorks信号量包括为信号量上阻塞的任务选择队列机制的能力。它们可以基于两个标准中的任何一个排队：先进先出（FIFO）顺序或优先级顺序；参见图7-7。
优先级排序更好地保持了系统的预期优先级结构，但是由于按优先级对任务进行排序，因此在采取操作时会消耗一些开销。FIFO队列不需要优先级排序开销，并导致恒定的时间性能。队列类型的选择是在使用信号量创建函数创建信号量期间指定的。使用优先级继承选项（SEM_INVERSION_SAFE）的信号量必须选择优先级顺序队列。

信号在RTPs中可中断的信号量

默认情况下，信号灯上挂起的任务不能被信号中断。信号只有在不再挂起（超时或获取了信号量）时才被传递到任务。
在创建二进制信号量和互斥信号量时，可以通过使用SEM_INTERRUPTIBLE选项来更改这些行为。然后，任务可以在信号量上挂起时接收信号，并且执行关联的信号处理程序。但是，semTake()调用然后返回ERROR，其中errno设置为EINTR，以指示信号量挂起时发生了信号（任务不返回挂起）。

信号量和VxWorks事件
信号量可以在指定的任务空闲时发送VxWorks事件。有关更多信息，请参见7.16个VxWorks事件，P.138。

7.12消息队列131
现代实时应用被构造为一组独立但协作的任务。虽然信号量为任务的同步和互锁提供了高速机制，但是通常需要更高级的机制来允许协作任务彼此通信。在VxWorks中，单个CPU中的主任务间通信机制是消息队列。
消息队列允许可变数目的消息（每个可变长度）排队。任务和ISR可以向消息队列发送消息，任务可以从消息队列接收消息。
图7-8使用消息队列的全双工通信
多个任务可以发送到同一个消息队列并从其接收。两个任务之间的全双工通信通常需要两个消息队列，每个方向一个；参见图7-8。
在VxWorks中有两个消息队列库。其中第一个是msgQLib，它提供VxWorks消息队列，专门为VxWorks设计；第二个是mqPxLib，它符合用于实时扩展的POSIX标准（1003.1b）。参见POSIX和VxWorks信号量的比较，第218页，讨论两种消息队列设计之间的差异。

7.13消息创建和使用132
使用msgQLib库提供的函数创建、使用和删除VxWorks消息队列。
这个库提供按照FIFO顺序排队的消息，只有一个例外：有两个优先级级别，标记为高优先级的消息被附加到队列的头部。
表74-VxWorks消息队列控制
功能描述
msgQInitialize（）初始化预先分配的消息队列。参见内核消息队列静态实例化，P.133。仅内核。
msgQCreate（）分配和初始化消息队列。
msgQDelete（）终止并释放消息队列
msgQSend（）向消息队列发送消息。
msgQReceive（）从消息队列接收消息。
使用msgQCreate（）创建消息队列。它的参数指定可以在消息队列中排队的消息的最大数量和每个消息的最大字节长度。为指定的消息数和长度分配足够的缓冲区空间。
任务或ISR用msgQSend（）发送消息到消息队列。如果没有任务正在队列上等待消息，则将消息添加到队列的消息缓冲区中。如果任何任务已经在等待来自该消息队列的消息，则消息立即被传递到第一个等待任务。
任务从msgQReceive（）接收消息队列中的消息。如果消息在消息队列的缓冲区中已经可用，则第一条消息立即退出队列并返回给调用者。如果没有消息可用，则调用任务阻塞，并添加到等待消息的任务队列中。
等待任务的队列可以根据任务优先级或FIFO进行排序，如创建队列时在选项参数中指定的那样。

与公共消息队列的进程间通信
VxWorks消息队列可以创建为私有对象，只能在创建它们的内存空间（内核或进程）内访问；也可以创建为公共对象，可以在整个系统中访问。为了创建作为公共对象的消息队列，必须使用msgQOpen()函数，并且消息队列名称必须以正斜杠（例如/myMsgQ）开头。
有关详细信息，请参阅7.18进程间与公共对象通信，p.147，VxWorks内核API引用中的msgQOpen条目和VxWorks应用程序API引用中的msgQLib条目。

内核消息队列的静态实例化

内核函数msgQCreate()执行一个动态的两步操作，其中在运行时为消息队列对象分配内存，然后初始化对象。消息队列（和其他VxWorks对象）也可以静态实例化，这意味着在编译时为该对象分配它们的内存，然后在运行时初始化该对象。
宏VX_MSG_Q在编译时声明消息队列。它接受三个参数：名称、消息队列中消息的最大数量和每个消息的最大大小。msgQInitialize()函数在运行时用于初始化消息队列并准备使用。宏和函数必须使用相同的消息队列名称，以及消息队列大小和消息最大数量的相同值。例如：
#include <vxWorks.h>
#include <msgQLib.h>
VX_MSG_Q(myMsgQ,100,16); /* declare the msgQ */
MSG_Q_ID myMsgQId; /* MsgQ ID to send/receive messages */
STATUS initializeFunction (void)
{
if ((myMsgQId = msgQInitialize (myMsgQ, 100, 16, options)) == NULL)
return (ERROR); /* initialization failed */
else
return (OK);
}
有关更多信息，请参见MSGQLIB的API引用。
有关静态实例化的一般信息，请参阅内核对象的1.5静态实例化，p.7。

消息队列超时
msgQSend（）和msgQReceive（）都采用超时参数。当发送消息时，超时指定如果没有可用空间来排队消息，则等待缓冲区空间变为可用的计时器数量。当接收到消息时，超时指定如果没有消息立即可用，则等待消息变为可用的节拍数。与信号量一样，超时参数的值可以具有NO_WAIT(0)的特殊值，意思是总是立即返回，或者WAIT_FOREVER(-1)，意思是永远不会超时函数。

有关本机VxWorks API超时和POSIAPI超时的更多信息，请参阅7.19关于VxWorks API超时参数，p.149。
消息队列紧急消息
msgQSend()函数允许将消息的优先级指定为正常（MSG_PRI_NORMAL）或紧急（MSG_PRI_URGENT）。普通优先级消息被添加到排队消息列表的尾部，而紧急优先级消息被添加到列表的头部。
消息队列代码示例
/* includes */
#include <vxWorks.h>
#include <msgQLib.h>
/* defines */
#define MAX_MSGS (10)
#define MAX_MSG_LEN (100)
MSG_Q_ID myMsgQId;
task2 (void)
{
char msgBuf[MAX_MSG_LEN];
/* get message from queue; if necessary wait until msg is available */
if (msgQReceive(myMsgQId, msgBuf, MAX_MSG_LEN, WAIT_FOREVER) == ERROR)
return (ERROR);
/* display message */
printf ("Message from task 1:\n%s\n", msgBuf);
}
#define MESSAGE "Greetings from Task 1"
task1 (void)
{
/* create message queue */
if ((myMsgQId = msgQCreate (MAX_MSGS, MAX_MSG_LEN, MSG_Q_PRIORITY))
== NULL)
return (ERROR);
/* send a normal priority message, blocking if queue is full */
if (msgQSend (myMsgQId, MESSAGE, sizeof (MESSAGE), WAIT_FOREVER,
MSG_PRI_NORMAL) == ERROR)
return (ERROR);
}

在这个例子中，任务T1创建消息队列并向任务T2发送消息。任务T2从队列接收消息并简单地显示消息。
RTPs中可被信号中断的消息队列
默认情况下，在RTP中，消息队列上挂起的任务不会被信号中断。信号只有在不再挂起（超时或获取消息队列）时才被传递到任务。
在创建消息队列时，可以使用MSG_Q_INTERRUPTIBLE选项来改变此行为。然后，任务可以在消息队列上挂起时接收信号，并且执行关联的信号处理程序。然而，msgQSend()或msgQReceive()调用然后返回ERROR，其中errno设置为EINTR，以指示在消息队列上挂起时发生了信号（任务不返回挂起）。
消息队列和排队选项
VxWorks消息队列包括为消息队列上阻塞的任务选择队列机制的能力。提供MSG_Q_FIFO和MSG_Q_PRIORITY选项是为了指定（对于msgQCreate()和msgQOpen()函数）应该用于挂起在msgQSend()和msgQReceive()上的任务的排队机制。
显示消息队列属性

VxWorks show()命令为两种消息队列生成密钥消息队列属性的显示。例如，如果MysgQID是
VxWorks消息队列，输出被发送到标准输出设备，并且看起来像来自Shell的下面（使用C解释器）：
-> show myMsgQId
Message Queue Id : 0x3adaf0
Task Queuing : FIFO
Message Byte Len : 4
Messages Max : 30
Messages Queued : 14
Receivers Blocked : 0
Send timeouts : 0
Receive timeouts : 0

具有消息队列的服务器和客户端
实时系统通常使用客户机-服务器模型来构造任务。在这个模型中，服务器任务接受来自客户端任务的请求以执行一些服务，并且通常返回一个应答。请求和答复通常以任务间消息的形式进行。在VxWorks中，消息队列或管道（参见7.14Pipes，p.136）是实现此功能的自然方式。
例如，客户端-服务器通信可以如图7-9所示实现。每个服务器任务创建一个消息队列来接收来自客户端的请求消息。每个客户端任务创建一个消息队列来接收来自服务器的回复消息。每个请求消息包括一个字段，该字段包含客户端的应答消息队列的MSGQID。服务器任务的主循环包括从其请求消息队列读取请求消息、执行请求以及向客户端的应答消息队列发送应答。
同样的架构可以通过管道而不是消息队列实现，或者通过其他方式根据特定应用程序的需要定制。
消息队列和VxWorks事件
消息队列可以在消息到达队列且没有任务正在等待时将VxWorks事件发送到指定的任务。有关更多信息，请参见7.16个VxWorks事件，P.138。

7.14管道136
管道为通过VxWorks  I/O系统的消息队列提供了另一种接口。管道设备由pipeDrv虚拟I/O设备管理，并使用内核消息队列设施来承载实际的消息流量。任务将消息写入管道，然后由其他任务读取这些消息。这允许您实现任务间通信的客户端-服务器模型。
作为I/O设备，管道还提供了一个重要的特性，即消息队列本身不能使用select()。此函数允许任务在任何一组I/O设备上等待数据可用。select()函数也适用于其他异步I/O设备，包括网络套接字和串行设备。
因此，通过使用select()，一个任务可以在多个管道、套接字和串行设备的组合上等待数据；在多个文件描述符上使用Stopter（）、P.304等待。
可以在RTPs中创建命名管道。但是，除非它们被应用程序专门删除，否则它们将超出其创建的RTP的生命周期。应用程序应该允许在启动应用程序时从先前调用中已经存在命名管道的可能性。
有关管道的更多信息，请参见VxWorks应用程序API引用中的ioLib条目，以及VxWorks内核API引用中的pipeDrv条目。

7.15管道的创建和使用137
函数pipeDevCreate()创建管道设备和与该管道相关联的底层消息队列。该调用指定所创建管道的名称、可以排队给它的消息的最大数量以及每个消息的最大长度。
语法如下：
status = pipeDevCreate ("/pipe/name", max_msgs, max_length);
创建的管道是通常命名的I/O设备。任务可以使用标准I/O函数打开、读取和写入管道，并调用ioctl函数。如同其他I/O设备一样，任务在从空管道读取数据时阻塞，直到数据可用，在写入完整管道时阻塞，直到有可用空间。

从内核中的ISR写到管道
在内核中，VxWorks管道被设计成允许ISR以与任务级代码相同的方式写入管道。许多VxWorks工具不能从ISR使用，包括输出到管道以外的设备。但是，ISR可以使用管道与任务进行通信，任务然后可以调用这些设施。ISR使用write()调用向管道写入。任务和ISR可以写入相同的管道。但是，如果管道已满，则丢弃消息，因为ISR不能挂起。除了write()之外，ISR不能在管道上调用任何I/O函数。有关ISR的更多信息，请参阅8.7“关于中断服务例程：ISR”，第163页。

管道I/O控制功能
管道设备响应表7-5中总结的ioctl()函数。列出的函数在头文件ioLib.h中定义。有关更多信息，请参阅ioLib中pipeDrv和ioctl()的参考条目。
FIOFLUSH 丢弃管道中的所有消息。
FIOGETNAME 获取文件描述符的管道名称。
FIONMSGS 获取管道中剩余的消息数量。
FIONREAD 获取管道中第一条消息的大小（以字节为单位）。

7.16个VxWorks事件138
VxWorks事件提供了任务和其他任务、中断服务例程（ISR）和任务、信号量和任务、消息队列和任务之间的通信和同步方法。事件可以由任务和ISR显式地发送，并且可以在消息队列或信号量空闲时发送。只有任务可以接收事件。
事件可以用作任务到任务和ISR-到任务同步的二进制信号量的轻量级替代（因为不必创建对象）。
它们还可以用于通知任务信号量已经可用，或者消息已经到达消息队列。
事件工具提供了一种机制，用于使用最多32个事件来协调任务的活动，这些事件可以由其他任务和ISR明确地发送给任务，或者当信号量和消息队列空闲时。任务可以等待来自多个源的多个事件。因此，事件提供了一种协调复杂活动矩阵的方法，而不需要分配额外的系统资源。
注意：VxWorks事件（在本节中也简单地称为事件）不应该与System Viewer事件混淆。
事件的VxWorks配置
为了提供事件设施，必须使用INCLUDE_VXEVENTS组件配置VxWorks。
VXEVENTS_OPTIONS配置参数控制RTP任务关于事件和信号的行为。它有以下选项：
EVENTS_NONINTERRUPTIBLE
信号不会取消在事件上挂起的RTP任务（默认选项）。
EVENTS_INTERRUPTIBLE
对事件上挂起的未结束RTP任务发出信号。

关于事件标志和任务事件寄存器
每个任务都有32个事件标志，按位编码为32位字（位25到32保留给风河使用），称为事件寄存器。事件寄存器用于存储任务从任务、ISR、信号量和消息队列接收的事件。

注意，事件标志本身没有内在含义。32个事件标志中的每一个的重要性完全取决于如何对任何给定任务进行编码以响应正在设置的特定位。没有记录任务接收到给定事件的次数的机制。一旦设置了标志，由相同或不同的发送方再次设置标志本质上是不可见的操作。
任务不能直接访问其事件注册表的内容；eventReceive()函数将事件注册表的内容复制到由*pEventsReceived参数指定的变量。
VxWorks事件标志宏和可供Wind River客户使用的值列于表7-6VxWorks事件标志，第139页。
注意：事件标志VXEV25（0x01000000）到VXEV32（0x80000000）只保留给Wind River使用，不应该由客户使用。
Table 7-6 VxWorks Event Flags
Macro Value
VXEV01 0x00000001
VXEV02 0x00000002
VXEV03 0x00000004
VXEV04 0x00000008
VXEV05 0x00000010
VXEV06 0x00000020
VXEV07 0x00000040
VXEV08 0x00000080
VXEV09 0x00000100
VXEV10 0x00000200
VXEV11 0x00000400
VXEV12 0x00000800
VXEV13 0x00001000
VXEV14 0x00002000
VXEV15 0x00004000
VXEV16 0x00008000
VXEV17 0x00010000
VXEV18 0x00020000
VXEV19 0x00040000
VXEV20 0x00080000
VXEV21 0x00100000
VXEV22 0x00200000
VXEV23 0x00400000
VXEV24 0x00800000

影响事件寄存器内容的功能如表7-7所示。
表7-7修改任务事件寄存器的函数
eventReceive() 根据选择的选项，清除或保留任务事件寄存器的内容。
eventClear()   清除任务事件寄存器的内容。
eventSend()    将事件写入任务的事件寄存器。
semGive()      如果任务用信号量注册，则将事件写入任务的事件寄存器。
msgQSend()     如果任务在消息队列中注册，则将事件写入任务的事件寄存器。

接收事件
通过调用eventReceive()，任务可以挂起在一个或多个事件上，或者简单地检查哪些事件已经被接收。事件是通过使用函数的事件参数的相关事件标志的值来指定的（参见关于事件标志和任务事件寄存器，p.138）。该函数提供了等待一个或多个这些事件的选项，以及如何管理未经请求的事件，以及在接收完整集之前检查已经接收到哪些事件的选项。
当接收到用eventReceive()调用指定的事件并且任务未结束时，事件寄存器的内容被复制到一个变量（由函数的*pEventsReceived参数指定），该变量对任务是可访问的。
当eventReceive()与EVENTS_WAIT_ANY选项一起使用时――这意味着任务在它接收的任何指定事件中的第一个事件中未结束――可以检查事件变量的内容以确定哪个事件导致任务未结束。

从信号量和消息队列接收事件的其他步骤
为了使任务在信号量或消息队列空闲（与简单地另一个任务相反）时接收事件，它必须首先向特定对象注册，使用信号量的semEvStart()或消息队列的msgQEvStart()。一次只能向任何给定的信号量或消息队列注册一个任务。
semEvStart()函数标识信号量以及在信号量空闲时应该发送到任务的事件。它还提供了一组选项，用于指定事件是仅在信号量第一次空闲时发送，还是每次都发送；如果信号量在注册时空闲，是否发送事件；以及是否允许来自另一个任务的后续semEvStart()调用生效（以及取消注册先前注册的任务）。一旦任务用信号量注册，每次信号量用sem.()释放时，只要没有其他任务挂起，事件就被发送到注册的任务。
为了请求停止事件发送，注册的任务调用semEvStop()。

发送事件
不管接收任务是否准备使用它们，任务和ISR都可以使用eventSend()显式地向任务发送特定事件。事件是通过使用函数的事件参数的相关事件标志的值来指定的（参见关于事件标志和任务事件寄存器，p.138）。
当信号量和消息队列是空闲的（分别使用semEvStart()或msgQEvStart()）时，事件自动发送到已注册用于通知的任务。物体自由的条件如下：

互斥信号量
当互斥信号量不再具有所有者并且没有任务挂起时，互斥信号量被认为是空闲的。例如，在调用sem.()之后，如果同一信号量的另一个任务在sem.()上挂起，则不发送事件。

二进制信号量
当没有任务拥有二进制信号量并且没有任务在等待它时，二进制信号量被认为是空闲的。

计数信号量
当计数信号量非零且没有任务挂起时，计数信号量被认为是空闲的。因此，事件不能用作计算信号量释放或给定的次数的机制。

消息队列
当消息出现在队列中并且没有任务等待消息到达队列时，认为消息队列是空闲的。因此，事件不能用作计算发送到消息队列的消息数量的机制。

注意，仅仅因为一个对象已经被释放并不意味着它是免费的。例如，如果给定一个信号量，则释放它；但是如果另一个任务在释放时正在等待它，则它不是免费的。当两个或多个任务不断交换对象的所有权时，对象可能永远不会变为空闲，并且永远不会发送事件。
还要注意，当事件被发送到任务以指示信号量或消息队列空闲时，并不意味着该对象以任何方式为该任务保留。当资源变为空闲时，等待来自对象的事件的任务会结束，但是对象可以在通知和终止之间的间隔内执行。如果接收事件的任务在eventReceive()中挂起，则该对象可以由更高优先级的任务获取。或者低优先级任务可能窃取对象：如果接收事件的任务在除了eventReceive()之外的某个函数中被挂起，则低优先级任务可以在事件被发送之后执行，并且（例如）执行sem.()，但是在接收任务从阻塞调用中退出之前。因此，无法保证当任务随后试图取得其所有权时，资源仍然可用。
警告：因为事件不能以任何方式为应用程序保留，所以应注意确保事件被唯一且明确地使用。注意，事件25到32（VXEV25到VXEV32）是为Wind River使用而保留的，不应该由客户使用。第三方应该确保记录他们对事件的使用，以便他们的客户不在他们的应用程序中使用相同的事件。

事件和对象删除
如果在任务等待事件时删除了信号量或消息队列，则semDelete()或msgQDelete()实现将自动取消该任务的结束。这防止任务在等待已删除的对象的事件时无限期挂起。挂起的任务然后返回到就绪状态（就像它在信号量本身上挂起一样），并从eventReceive()调用接收一个ERROR返回值，该值导致它最初挂起。
但是，如果该对象在任务的注册调用和它的eventReceive()调用之间被删除，则该任务仍然挂起。例如，如果当任务在semEvStart()和eventReceive()调用之间时删除了一个信号量，则该任务挂起在eventReceive()中，但是事件从未发送。因此，当预期对象删除时，使用WAIT_FOREVER之外的超时非常重要。有关超时的信息，请参阅7.19关于VxWorks API超时参数，第149页。

事件和任务删除
如果在信号量或消息队列向任务发送事件之前删除了任务，则仍然可以发送事件，但显然没有接收到事件。默认情况下，VxWorks会静默地处理此事件传递失败。
然而，对于创建对象的应用程序来说，当事件没有被为其注册的（现在不存在）任务接收到时，通知它们可能是有用的。在这种情况下，可以用一个选项创建信号量和消息队列，该选项在事件传递失败时返回错误（分别为SEM_EVENTSEND_ERROR_NOTIFY和MSG_Q_EVENTSEND_ERROR_NOTIFY选项）。然后，当对象变为空闲时，sem.()或msgQSend()调用返回ERROR。
错误并不意味着没有给出信号量或消息没有正确传递。它仅仅意味着事件不能被发送到已注册的任务。注意，发送消息或给出信号量的失败优先于事件失败。
进程间与事件的通信
对于要在进程间通信中使用的事件，通信中所涉及的对象（任务、信号量和消息队列）必须是公共的。有关更多信息，请参阅7.18与公共对象的进程间通信，第147页。
事件函数
表7-8列出了用于处理事件的函数。
eventSend() 将指定的事件发送到任务。
eventReceive() 挂起任务，直到接收到指定的事件为止。还可以用于检查在过渡期间接收了哪些事件。
eventClear() 清除调用任务的事件寄存器。
semEvStart() 注册要通知的信号量可用性的任务。
semEvStop() 取消注册先前已注册用于通知信号量可用性的任务。
msgQEvStart() 注册一个任务，以便在没有收件人挂起时通知消息队列上的消息到达。
msgQEvStop() 取消注册先前已注册用于消息队列上的消息到达通知的任务。
有关这些函数和代码示例的更多信息，请参阅API eventLib、semEvLib和msgQEvLib的引用。

显示函数和事件
为了调试使用事件的系统，taskShow、semShow和msgQShow库显示事件信息。
taskShow库显示以下信息：
■事件寄存器的内容
■期望的事件
■调用eventReceive()时指定的选项
semShow和msgQShow库显示以下信息：
■注册为接收事件的任务
■资源要发送到该任务的事件
■传递给semEvStart()或msgQEvStart()的选项

7.17 VxWorks条件变量144
VxWorks条件变量提供了任务同步机制，该机制将对资源的线程安全访问与事件信令能力相结合。
通过标准VxWorks互斥信号量确保对资源的线程安全访问，该信号量在关联条件变量的操作期间自动释放并重新获取。条件变量的典型用例是应用程序的生产者/消费者类型，它允许：
■应用程序数据的线程安全更新（在互斥锁下）。
■为等待应用数据的特定条件的任务发送信号。
■线程安全检查条件（在相互斥锁下）并等待（挂起）直到条件发出信号。
VxWorks条件变量在功能上等价于POSIX条件变量（pthread_condvar_wait()、pthread_condvar_.()等等）。
虽然POSIX条件变量只在POSIX线程的上下文中工作，但是VxWorks条件变量在任何VxWorks任务的上下文中工作，并且它们与本机VxWorks互斥信号量一起工作。有关VxWorks中的POSIX条件变量的信息，请参阅9.17POSIX Pthread互斥和条件变量，p.204。
条件变量函数不能从中断服务例程（ISR）调用。

条件变量的VxWorks配置
注意，条件变量不需要VSB配置。
INCLUDE_CONDVAR组件提供了对条件变量的支持。如果使用INCLUDE_RTP组件支持RTP，将自动添加INCLUDE_CONDVAR。
condVarShow()函数由INCLUDE_CONDVAR_SHOW组件提供。

条件变量API
表7-9条件变量函数
功能       用户模式  描述
condVarCreate()     yes 创建条件变量。
condVarInitialize() no  初始化静态分配的条件变量。只有内核。
condVarDelete()     yes 删除条件变量；如果没有任务等待，则成功。
condVarDestroy()    no  删除条件变量；如果有的话，刷新等待任务。
condVarTerminate()  no Terminate静态初始化的条件变量。
condVarWait()       yes 在条件变量上是Pend，直到发出信号为止。
condVar.()          yes 发送一个条件变量，释放一个挂起的任务。
condVarBroadcast() yes 释放条件变量上挂起的所有任务。
condVarShow() no Show关于条件变量的信息。
condVarOpen() yes打开一个命名的条件变量。
condVarClose() yes关闭命名条件变量。
condVarUnlink() yes Unlink命名的条件变量。
有关更多信息，请参阅condVarlib、condVarOpen和condVarShow API参考条目。

System Viewer事件
条件变量子系统包括四个System Viewer事件。
表7-10条件变量的System Viewer事件
System Viewer事件       发生的时间
EVENT_CONDVAR_CREATE    条件变量的创建
EVENT_CONDVAR_WAIT      在条件变量上等待
EVENT_CONDVAR_SIGNAL    向条件变量发送信号
EVENT_CONDVAR_BROADCAST 条件变量的广播
示例代码
这个例子说明了条件变量的使用。两个函数varRead()和varWrite()可以由两个不同的任务调用，允许它们在数据准备读取（通过条件变量之一canRead发信号）时以及新数据可以写入（通过另一个条件变量canWrite发信号）时同步。
#include <vxWorks.h>
#include <semLib.h>
#include <condVarLib.h>
typedef enum state {READABLE, WRITABLE} STATE;
STATE varState = WRITEABLE; /* variable state */
int var; /* data to read or write */
CONDVAR_ID canRead; /* signal READABLE state */
CONDVAR_ID canWrite; /* signal WRITABLE satte */
SEM_ID varMutex; /* for mutual exclusion */
void appInitialize (void)
{
/* Create a mutual-exclusion semaphore. */
varMutex = semMCreate (SEM_Q_PRIORITY);
/* Create a condition variables */
canRead = condVarCreate (CONDVAR_Q_PRIORITY);
canWrite = condVarCreate (CONDVAR_Q_PRIORITY);
}
STATUS varRead
(
int * pData
)
{
semTake (varMutex, WAIT_FOREVER);
/* If the condition is not true, wait on the condVar. */
while (varState != READABLE)
{
condVarWait (canRead, varMutex, WAIT_FOREVER);
}
/* Now the variable is readable; the caller owns the mutex. */
*pData = var;
/* Reset the condition. */
varState = WRITEABLE;
semGive (varMutex);
/* Signal the writer that new data can be written */
condVarSignal (canWrite);
return OK;
}
STATUS varWrite
(
int data
)
{
semTake (varMutex, WAIT_FOREVER);
/* If the condition is not true, wait on the condVar. */
while (varState != WRITEABLE)
{
condVarWait (canWrite, varMutex, WAIT_FOREVER);
}
/* now the variable is writable; the caller owns the mutex. */
var = data;
/* new data written, reset the variable state to readable */
varState = READABLE;
semGive (varMutex);
/* Signal the reader that data as been written */
condVarSignal (canRead);
return OK;
}

7.18与公共对象的进程间通信 147
信号量和消息队列之类的内核对象可以创建为私有或公共对象。这提供了对它们的可访问性范围的控制――可以通过将它们定义为私有来限制虚拟内存上下文，或者通过将它们定义为公共来扩展到整个系统。公共对象可以从所有进程和内核中看到，因此可用于进程间（和内核-进程）通信。公共对象和私有对象之间的性能没有区别。
对象只能在创建时定义为公共的或私有的，此后不能更改指定。创建公共对象时必须命名它们，并且名称必须以正斜杠开头；例如/foo。
私有对象不需要命名。
有关除了本节中提供的命名任务之外的命名任务的信息，请参阅6.7任务名称和ID，p.92。
创建和命名公共和私有对象
公共对象总是命名的，并且名称必须以正斜杠开头。私有对象可以命名或未命名。如果它们被命名，则名称不能以正斜杠开头。只能创建给定类和名称的一个公共对象。也就是说，只能有一个名为/foo的公共信号量。但是可能存在名为/foo的公共信号量和名为/foo的公共消息队列。显然，更独特的命名更可取（例如/fooSem和/fooMQ）。
系统只允许在任何给定的内存上下文中创建给定类和名称的一个私有对象；也就是说，在任何给定的进程或内核中。例如：
■如果进程A已经创建了一个名为bar的私有信号量，则它不能创建第二个名为bar的信号量。
■然而，进程B可以创建名为bar的私有信号量，只要它尚未拥有具有相同名称的信号量。
注意，私有任务是这个规则的例外――私有任务允许使用重复的名称；参见6.7任务名称和ID，p.92。
要创建命名对象，必须使用适当的xyzOpen()API，比如semOpen()。当函数指定以正斜杠开始的名称时，对象将是公共的。
要删除公共对象，不能使用xyzDelete()API（它只能用于私有对象）。相反，必须根据POSIX标准使用xyzClose()和xyzUnlink()API。也就是说，它们必须从名称空间中解链接，然后最后一个关闭操作将删除对象（例如，使用公共信号量的semUnlink()和semClose()API）。
或者，可以首先执行所有关闭操作，然后执行取消链接操作，然后删除对象。请注意，如果使用OM_DELETE_ON_LAST_CLOSE标志创建对象，则无论它是否未链接，都将使用上一次关闭操作删除该对象。
有关用于在内核中创建公共内核对象的API的详细信息，请参阅VxWorks内核API引用中的msgQOpen、semOpen、taskOpen和timerOpen条目。有关用于创建公共用户模式（RTP）对象的API的信息，请参阅VxWorks应用程序API引用中的msgQLib、semLib、taskLib和timerLib条目。
使用公共信号源的进程间通信的示例
下面的代码提供了使用公共信号量来协调两个RTP的活动的简单示例。更广泛的上下文可能是采取RTP要求在给定RTP运行之前由它执行一些设置活动。如果获取RTP在给定RTP之前启动，则它将阻塞，直到给定RTP运行并给出信号量；如果它在给定RTP之后启动，则它只是获取信号量并继续。
take.c RTP Application:
#include <vxWorks.h>
#include <stdio.h>
#include <semLib.h>
#include <sysLib.h>
#include <taskLib.h>
void main (void)
{
char * semName = "/semIdTZsync"; /* Public semaphore */
SEM_ID semSyncRTP;
/*
* Create a binary semaphore to be used for synchronization
* with the RTP.
*/
semSyncRTP = semOpen (semName, /* name of semaphore */
SEM_TYPE_BINARY,/* type of semaphore */
SEM_EMPTY, /* initial state or initial count */
SEM_Q_FIFO, /* semaphore options */
OM_CREATE, /* OM_CREATE, ... */
NULL); /* context value. Not used in VxWorks */
printf("%s trying to take the semaphore %s\n", taskName(taskIdSelf()),
semName);
semTake(semSyncRTP, WAIT_FOREVER);
printf("\thave it\n");
}
give.c RTP Application
#include <vxWorks.h>
#include <stdio.h>
#include <semLib.h>
#include <sysLib.h>
#include <taskLib.h>
void main (void)
{
char * semName = "/semIdTZsync"; /* Public semaphore */
SEM_ID semSyncRTP;
/*
* Create a binary semaphore to be used for synchronization
* with the RTP.
*/
semSyncRTP = semOpen (semName, /* name of semaphore */
SEM_TYPE_BINARY,/* type of semaphore */
SEM_EMPTY, /* initial state or initial count */
SEM_Q_FIFO, /* semaphore options */
OM_CREATE, /* OM_CREATE, ... */
NULL); /* context value. Not used in VxWorks */
printf("%s giving the semaphore %s\n", taskName(taskIdSelf()), semName);
semGive(semSyncRTP);
printf("\tgave it\n");
}

7.19关于VxWorks API超时参数149
各种本机VxWorksAPI接受一个超时参数，该参数的值是用semTake()、msgQReceive()等标记指定的。计时中的超时不能完全等同于以秒为单位的特定时间。
例如，指定1超时意味着直到下一个系统时钟中断，这可能发生在某个时间点小于中断之间的全部时间量。为了确保超时至少持续期望的时间量，请在超时值中添加一个附加标记。例如，如果一个刻度是一毫秒，并且您希望超时至少为两毫秒，则使用超时值3。
与本机VxWorksAPI不同，VxWorks提供的POSIX-API使用超时参数，其值以秒为单位，例如，sem_timedwait()指定。在内部，当时间值转换为滴答声时，滴答声计数将自动增加1，以确保超时至少持续指定的时间量。
可以使用sysClockRateGet()来确定每秒的滴答次数。可以使用SYS_CLK_RATE配置参数更改时钟速率。

7.20关于对象所有权和资源回收149
所有对象（例如信号量）都由创建者任务所属的进程拥有，或者如果创建者任务是内核任务，则由内核拥有。当必须更改所有权时，例如，在过程创建钩子中，可以使用objOwnerSet()。但是，它的使用受到限制――新的所有者必须是进程或内核。
当进程死亡时，进程拥有的所有对象都将自动销毁。
当父对象被销毁时，作为另一个对象的子对象的所有对象都会自动销毁。
进程可以通过对象按名称查找功能（使用xyzOpen()函数集）共享公共对象。进程之间的共享对象只能通过名称进行。
当一个进程终止时，它所拥有的所有私有对象都被删除，而不管它们是否被命名。流程中对公共对象的所有引用都被关闭（执行xyzClose()操作）。因此，在资源回收期间，如果不再有未完成的xyzOpen()调用（即，没有其他进程或内核对其有引用），则删除任何公共对象，而不管创建的是哪个进程，并且该对象已经解链接或使用OM_DELETE_ON_LAST_CLOSE选项创建。此规则的例外是任务，当其创建者进程死亡时，总是回收这些任务。
当一个公共对象的创建者进程死亡，但是该对象幸存下来是因为它没有被解链接或者因为另一个进程对其有引用，则该对象的所有权被分配给内核。
在内核中，可以使用objShowAll()show函数显示关于对象之间所有权关系的信息。在RTP中，objHandleShow()show函数可用于显示关于进程中对象之间的所有权关系的信息。