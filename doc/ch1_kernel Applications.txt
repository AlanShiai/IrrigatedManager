1.1 关于内核程序
VxWorks内核应用程序以与内核本身相同的模式和内存空间执行。在这方面，它们不同于与其他操作系统（如UNIX和Linux）的应用程序，也不同于VxWorks实时（RTP）应用程序。
内核应用程序可以交互式下载并在VxWorks目标系统上运行，或者与操作系统映像链接并（可选地）配置为在引导时自动执行。
在内核中执行的VxWorks应用程序被创建为可重新定位的对象模块。它们可以更具体地称为基于内核的应用程序模块，但是像本指南中所做的那样，简单地将它们称为内核应用程序模块或内核应用程序通常比较方便。（它们有时在Workbench项目类型可下载内核模块的缩写之后称为DKM，即使它们与内核链接时也是如此。）内核应用程序不应该与作为实时进程（RTP）在用户模式下执行的应用程序混淆。
当构建基于内核的应用程序模块时，将用户代码链接到所需的VxWorks库，并生成ELF二进制文件。内核应用程序使用VxWorks工具，包括定义操作系统接口和数据结构的头文件。
内核应用模块可以是：
通过对象模块加载程序下载并动态链接到操作系统。
与操作系统静态链接，使它们成为系统映像的一部分。
内核模块对于快速开发和调试很有用，因为不需要为应用程序的每次迭代重新构建操作系统映像。该方法也可用于生产系统的诊断设备。各种开发工具，包括调试器和shell（主机或内核），可以用来下载和管理模块。模块可以从内核支持的任何主机文件系统（NFS、FTP等）下载到目标。
内核应用模块也可以存储在Flash或ROM、ROMFS文件系统或磁盘上。一旦加载到目标中，内核应用程序模块就可以从shell或Workbench交互式地启动。
静态链接到操作系统的应用程序模块可以与shell或Workbench交互运行。VxWorks还可以被配置为在启动时自动启动它们。静态连接和自动启动显然适用于生产系统。
在内核空间中运行的应用程序不作为进程执行；它只是在内核空间中运行的另一组任务。内核不保护内核应用程序的任何不当行为的保护，并且应用程序也同样不保护其他内核应用程序的保护，内核模块在超级用户模式下在相同的地址空间中运行。
警告：如果希望将内核应用程序移植到作为实时进程（RTP）执行的用户模式应用程序，则必须确保它满足RTP应用程序的代码要求，并按此进行编译。还必须确保VxWorks配置为对RTPs的支持。有关更多信息，请参见22，内核到RTP应用程序迁移。

内核应用和内核组件需求
VxWorks是一个高度可配置的操作系统。当构建独立于操作系统内核应用程序模块时，构建过程无法确定应用程序最终将在其上运行的VxWorks实例是否已经配置了应用程序所需的所有组件（例如，网络和文件系统）。因此，应用程序代码检查指示内核设施不可用的错误（即，检查API调用的返回值）并做出适当响应是很有用的。当内核应用程序模块与操作系统链接时，构建系统生成关于丢失组件的错误。Workbench和wrtool命令行工具都提供了检查依赖关系并相应地重新配置VxWorks的机制。

二进制文件兼容性
注意：为VxWorks构建的代码只有在基于相同的VSB配置（具有相同的层和版本集）时才是二进制兼容的。此外，内核C++代码必须用与VxWorks映像相同的编译器来构建。
注意：如果模块与VxWorks系统不兼容，内核对象模块加载器将拒绝该模块，打印错误消息，并设置errno（当体系结构不同时设置S_loadElfLib_HDR_READ，或者当其他特性不同时设置S_loadLib_INCOMPATIBLE_MODULE）。

内核应用程序与RTP应用程序的比较
内核应用程序和RTP应用程序之间的主要区别在于，RTP应用程序在单独的受保护的内存环境中运行，而内核应用程序则不是。在各自的环境中还存在的差异有，可用的特性，以及性能、占用空间和内存使用。
VxWorks内核应用程序以内核模式在内核内存空间中运行。它们可以与内核链接，或者在运行时下载到内核中（作为可下载内核模块DKMs）。因为内核应用程序在内核中运行，所以系统不能保护内核免受应用程序方面的不当行为，也不能保护应用程序彼此之间不发生不当行为。在运行时，VxWorks系统任务（如tExcTask）和应用程序任务仅通过它们的优先级和代码的功能来区分。
RTP应用程序在用户模式下作为实时进程执行，每个进程都在它们自己的受保护内存空间中，该内存空间与其他RTP应用程序和内核分开。当该保护是系统的关键考虑时，应使用RTP应用程序。RTP应用程序是独立于内核构建和存储的（在开发期间在主机上以及部署系统的目标上）。VxWorks RTP应用程序与UNIX和Linux等其他操作系统的应用程序类似，只是VxWorks实时进程是为实时系统设计的（有关这方面的更多信息，请参阅2.实时过程：RTPs）。
内核应用程序环境和RTP应用程序环境具有许多相同的特性，但是可用的特性方面也有所不同。例如，驱动程序只能安装在内核中，而PTE52一致性只能在RTP环境中实现。
虽然在内核环境或RTP环境中执行代码的速度没有内在的差异，但是它可能受到代码优化（尽管在RTP环境中影响较小）和系统调用（特定于RTP环境）的使用的影响。尤其使用系统调用（通常是这种情况）的RTP应用程序比类似的内核应用程序慢。此外，VSB项目可用于从各种VxWorks库中删除RTP处理代码（使用Real-Time Process选项），这提高了这些库的性能并减小了它们的大小。
此外，配置有RTP支持组件的VxWorks图像将略大于不支持RTX支持组件的VxWorks图像。而且，对于采用RTP应用程序的系统，总体内存需求通常比可比较的内核应用程序的系统大，因为RTP应用程序包括用户端库（它复制了内核中已经包括的库）。