8.1关于信号152
信号是一种操作系统工具，用于处理异常情况并异步改变控制流程。在许多方面，信号是等效于硬件中断的软件。操作系统生成的信号包括响应总线错误和浮点异常生成的信号。信号设施还提供API，这些API可用于以编程方式生成和管理信号。
在应用程序中，信号最适合错误和异常处理，而不适合于通用任务间通信。常见的用途包括使用信号来终止进程和任务、在定时器已触发或消息已到达消息队列时发送信号事件等。
根据POSIX，VxWorks支持63个信号，每个信号具有唯一的编号和默认动作（在..h中定义）。值0被保留作为NULL信号使用。
信号可以从任务提升（发送）到任务或进程。信号可以被接收任务或进程捕获（接收）或忽略。信号是被捕获还是被忽略通常取决于信号掩码的设置。在内核中，信号掩码是特定于任务的，如果没有设置任务来接收特定信号，则忽略它。在用户空间中，信号掩码是特定于进程的，并且一些信号，例如SIGKILL和SIGSTOP，不能被忽略。
为了管理对信号的响应，可以创建和注册信号处理函数，该函数允许任务以任何对应用程序有用的方式响应特定信号。有关信号处理器的信息，请参阅8.6.Hand.，第161页。
内核任务或中断服务例程（ISR）可以为特定任务或进程发出信号。在内核中，信号生成和传递在生成信号的任务或ISR的上下文中运行。根据POSIX标准，发送给进程的信号由已设置为处理进程中的信号的第一可用任务处理。
每个内核任务都有一个与之关联的信号掩码。信号掩码确定任务接受哪些信号。默认情况下，信号掩码是在所有信号未被阻塞的情况下初始化的（内核中没有掩码设置的继承）。可以使用sigproc.()更改掩码。
可以在内核中为特定任务注册信号处理器。信号处理器在接收任务的上下文中执行，并利用该任务的执行堆栈。即使任务被阻塞（挂起或挂起），也会调用信号处理程序。
VxWorks提供了一个软件信号工具，包括POSIX函数、UNIX BSD兼容函数和本机VxWorks函数。与POSIX兼容的信号接口包括POSIX标准1003.1中指定的基本信令接口和POSIX 1003.1b的队列信号扩展。这些非POSIXAPI是：taskSigqueue()、rtpSigqueue()、rtpTaskSigqueue()、taskKill()、rtpKill()、rtpTaskKill()和taskRaise()。
在VxWorks内核中，为了与先前版本的VxWorks向后兼容，使用进程标识符作为参数的POSIX类API，取而代之的是任务标识符。
注意：内核不支持SIGEV_THREAD选项。
注意：Wind River建议您不要在同一个应用程序中同时使用POSIXAPI和VxWorksAPI。这样做可能使POSIX应用程序不一致。

RTP任务(用户模式)可以为以下任一个发出信号：
自我本身
■在其过程中任何其他任务
■系统中任何进程中的任何公共任务
■它自己的过程
■系统中的任何其他过程
用户空间任务不能为内核任务发出信号，即使它是一个公共任务（有关公共任务的信息，请参阅进程间通信的任务公共命名，p.93）。
与内核信号生成和传递不同，内核信号生成和传递在生成信号的任务或ISR的上下文中运行，用户空间信号生成由发送器任务执行，但是信号传递动作发生在接收任务的上下文中。
对于进程，信号处理功能应用于整个进程，并且不特定于进程中的任何一个任务。
信号处理是在整个过程的基础上完成的。也就是说，如果任务注册了信号处理器，并且该任务正在等待该信号，则该任务将处理到该进程的信号。否则，任何没有阻塞信号的任务都将处理该信号。如果没有任务等待给定信号，则信号在处理中保持挂起，直到可以接收信号的任务变得可用为止。
每个任务都有一个与之关联的信号掩码。信号掩码确定任务接受哪些信号。当创建任务时，它的信号掩码是从创建它的任务继承来的。如果父任务是内核任务（即，如果进程是从内核派生的），则对所有信号解锁时初始化信号掩码。
它还继承与每个信号相关联的默认操作。稍后可以使用sigproc.()更改这两者。
VxWorks提供了一个软件信号工具，包括POSIX函数和本机VxWorks函数。符合POSIX的信号接口包括POSIX标准1003.1中指定的基本信令接口和来自POSIX 1003.1b的队列信号扩展。
还为信号提供了以下非POSIXAPI：taskSigqueue()、taskKill()、rtpKill()和taskRaise()。提供这些API是为了方便将VxWorks内核应用程序移植到RTP应用程序。
注意：POSIX信号在内核和实时进程中的处理方式不同。在内核中，信号的目标始终是任务；但是在用户空间中，信号的目标可以是特定任务或整个进程。
注意：sigLib的VxWorks实现没有对SIGKILL、SIGCONT和SIGTOP信号（例如UNIX强加的信号）的操作施加任何特殊限制。例如，不能在SIGKILL和SIGSTOP上调用.()的UNIX实现。
除了信号之外，VxWorks还使用VxWorks事件工具提供另一种类型的事件通知。虽然信号事件是完全异步的，但是VxWorks事件是异步发送的，但是是同步接收的，并且不需要信号处理器。有关更多信息，请参阅7.16VxWorks事件，第138页。

8.2用于信号的VxWorks配置154
8.3基本信号功能155
8.4排队信号功能156
8.5信号事件160
8.6信号处理器161
8.7关于中断服务例程：ISR 163
8.8 ISR 164的VxWorks配置
8.9可用于ISR 165的设施
8.10 ISR编码和调试166
8.11系统时钟ISR修改170
8.12与中断171的ISR连接
8.13运行时的ISR信息172
8.14 ISR和工作队列恐慌172
8.15关于看门狗定时器173